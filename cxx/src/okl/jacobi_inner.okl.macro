/**
 * Poisson problem:               diff(u, x, 2) + diff(u, y, 2) = f
 * Coordinate transform:          x -> -1 + delta*i, 
 *                                y -> -1 + delta*j
 * 2nd-Order finite difference:   4*u(j,i) - u(j-1,i) - u(j+1,i) - u(j,i-1) - u(j,i+1) = -delta*delta*f(j,i) *
 * Define: rhs(j,i) = -delta*delta*f(j,i)
 *
 * Jacobi iteration: newu(j,i) = 0.25*(u(j-1,i) + u(j+1,i) + u(j,i-1) + u(j,i+1) + rhs(j,i))
 * To run with a 402x402 grid until the solution changes less than 1e-7 per iteration (in l2): ./main 400 1e-7  
 *
 */
#ifndef JACOBI_INNER_OKL_MACRO
#define JACOBI_INNER_OKL_MACRO

/* header files */
#include "./okl/precision_types.h"

#define jacobi_inner(N, RHS, U, NEWU) {                                                                                                      \
                                                                                                                                             \
    /* set reshaped array pointers */                                                                                                        \
    const Real @dim(N+2,N+2) *rhs = RHS;                                                                                                     \
    const Real @dim(N+2,N+2) *u = U;                                                                                                         \
          Real @dim(N+2,N+2) *newu = NEWU;                                                                                                   \
                                                                                                                                             \
    for(int j=start1; j<start1+BY; ++j; @inner(1)){                                                                                          \
      for(int i=start0; i<start0+BX; ++i; @inner(0)){                                                                                        \
        if((i < N) && (j < N)){                                                                                                              \
          newu(i,j) = 0.25*(u(i,j-1) + u(i,j+1) + u(i-1,j) + u(i+1,j) + rhs(i,j));                                                           \
        }                                                                                                                                    \
      }                                                                                                                                      \
    }                                                                                                                                        \
}
#endif