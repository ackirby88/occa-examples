=======================
OCCA BUILD INSTRUCTIONS
=======================
  # move into occa directory
  git submodule init && git submodule update
  cd occa

  # configure cmake and build
  CC=mpicc CXX=mpicxx FC=mpif90 OCCA_ENABLE_OPENCL="OFF" OCCA_ENABLE_DPCPP="OFF" OCCA_ENABLE_FORTRAN="ON" ./configure-cmake.sh

  # >>> NOTE: you may need to edit configure-cmake.sh to enable/disable DEVICE MODES (or ccmake below)
    
  # build and install occa
  cd build
  ccmake .           # set any other configurations
  make -j4 install   # build and install occa

  # check if external libraries are linked (e.g., libcuda.so.1)
  cd bin
  ldd occa
  >> (CUDA Example) >> IF: libcuda.so.1 => not found, THEN: make sure the compute environment has a GPU exposed
    >> SOLUTION on HPC Cluster: start an interactive job with a GPU.
    >> e.g., UWYO ARCC: "salloc --account=uw-soc --time=40:00 --nodes=1 --ntasks-per-node=1 --gres=gpu:1" 

======================
OCCA TUTORIAL EXAMPLES
======================


==========================
FORTRAN BUILD INSTRUCTIONS
==========================
  # cd to fortran demo
  cd demo-F90

  # configure and build
  ./configure.sh

  # execute
  cd builds/demo_release/bin
  ./demo-f90.mpi

  # RESOLVING A COMMON ISSUE
  >> IF THE FOLLOWING ERROR ARISES:
	'''
		Thread Mode Set: CUDA
		 Compiling OCCA kernels...
		 > Building macro: jacobi_inner.okl > Success! ./okl/jacobi_inner.okl.macro
		   Kernel: norm2
		terminate called after throwing an instance of 'occa::exception'
		  what():  
		---[ Error ]--------------------------------------------------------------------
		    File     : /home/akirby/codes/occa-examples/occa/src/occa/internal/utils/sys.cpp
		    Line     : 769
		    Function : operator()
		    Message  : Could not compile compilerVendorTest.cpp with following command: 
				...
	'''
     SOLUTION: On the Command-Line Terminal:
	'''
		export OCCA_CXX=mpicxx
	'''

  # TO REBUILD (edit src/main.F90 for DEVICE MODES)
  cd builds/demo_release
  make clean; make

  
======================
C++ BUILD INSTRUCTIONS
======================
  # cd to c++ demo
  cd demo-cxx 

  # configure and build
  ./configure.sh

  # execute
  cd builds/demo_release/bin
  ./demo-c++.mpi  

  # TO REBUILD (edit src/main.cxx for DEVICE MODES)
  cd builds/demo_release
  make clean; make
