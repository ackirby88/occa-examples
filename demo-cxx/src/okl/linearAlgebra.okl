/* ========= *
 * Version 1 *
 * ========= */

/* kernels */
//@kernel void single2double(const int nsize,
//                 @restrict const float *fval,
//                 @restrict       double *dval){
//    for(int ie = 0; ie < nsize; ++ie; @tile(p_blockSize,@outer,@inner)){
//        dval[ie] = double(fval[ie]);
//    }
//}
//
//@kernel void double2single(const int nsize,
//                 @restrict const double *dval,
//                 @restrict       float *fval){
//    for(int ie = 0; ie < nsize; ++ie; @tile(p_blockSize,@outer,@inner)){
//        fval[ie] = float(dval[ie]);
//    }
//}

@kernel void vector_scale(const int nsize,
                          const double a,
                      @restrict double *vec){

    for(int ie = 0; ie < nsize; ++ie; @tile(p_blockSize,@outer,@inner)){
        vec[ie] *= a;
    }
}

@kernel void axpby(const int nsize,
                   const double a,
               @restrict double *dX,
                   const double b,
               @restrict double *dY){

    for(int ie = 0; ie < nsize; ++ie; @tile(p_blockSize,@outer,@inner)){
        dY[ie] = a*dX[ie] + b*dY[ie];
    }
}

@kernel void inner_product(const int Nblocks,
                           const int N,
                 @restrict const double *x,
                 @restrict const double *y,
                 @restrict       double *dot){

    for(int b = 0; b < Nblocks; ++b; @outer(0)){
        @shared volatile double s_dot[p_blockSize];

        for(int t = 0; t < p_blockSize; ++t; @inner){
            int id = t + b*p_blockSize;
            s_dot[t] = 0.0;
            while(id < N){
                s_dot[t] += x[id]*y[id];
                id += p_blockSize*Nblocks;
            }
        }
        @barrier;

#if (p_blockSize > 512)
        for(int t = 0; t < p_blockSize; ++t; @inner) if(t<512) s_dot[t] += s_dot[t+512];
        @barrier();
#endif

#if (p_blockSize > 256)
        for(int t = 0; t < p_blockSize; ++t; @inner) if(t<256) s_dot[t] += s_dot[t+256];
        @barrier();
#endif

        for(int t = 0; t < p_blockSize; ++t; @inner) if(t<128) s_dot[t] += s_dot[t+128];
        @barrier();

        for(int t = 0; t < p_blockSize; ++t; @inner) if(t< 64) s_dot[t] += s_dot[t+ 64];
        @barrier();

        for(int t = 0; t < p_blockSize; ++t; @inner) if(t< 32) s_dot[t] += s_dot[t+ 32];
        @barrier();

        for(int t = 0; t < p_blockSize; ++t; @inner) if(t< 16) s_dot[t] += s_dot[t+ 16];
        for(int t = 0; t < p_blockSize; ++t; @inner) if(t<  8) s_dot[t] += s_dot[t+  8];
        for(int t = 0; t < p_blockSize; ++t; @inner) if(t<  4) s_dot[t] += s_dot[t+  4];
        for(int t = 0; t < p_blockSize; ++t; @inner) if(t<  2) s_dot[t] += s_dot[t+  2];
        for(int t = 0; t < p_blockSize; ++t; @inner) if(t<  1) dot[b] = s_dot[0] + s_dot[1];
    }
}

@kernel void norm2(const int Nblocks,
                   const int N,
         @restrict const double *x,
         @restrict       double *norm){

    for(int b = 0; b < Nblocks; ++b; @outer){
        @shared double s_norm[p_blockSize];

        for(int t = 0; t < p_blockSize; ++t; @inner){
            int id = t + b*p_blockSize;
            s_norm[t] = 0.0;
            while(id < N){
                s_norm[t] += x[id]*x[id];
                id += p_blockSize*Nblocks;
            }
        }
        @barrier;

#if (p_blockSize > 512)
        for(int t = 0; t < p_blockSize; ++t; @inner) if(t<512) s_norm[t] += s_norm[t+512];
        @barrier;
#endif

#if (p_blockSize > 256)
        for(int t = 0; t < p_blockSize; ++t; @inner) if(t<256) s_norm[t] += s_norm[t+256];
        @barrier;
#endif
        for(int t = 0; t < p_blockSize; ++t; @inner) if(t<128) s_norm[t] += s_norm[t+128];
        @barrier;

        for(int t = 0; t < p_blockSize; ++t; @inner) if(t<64) s_norm[t] += s_norm[t+64];
        @barrier;

        for(int t = 0; t < p_blockSize; ++t; @inner) if(t<32) s_norm[t] += s_norm[t+32];
        @barrier;

        for(int t = 0; t < p_blockSize; ++t; @inner) if(t<16) s_norm[t] += s_norm[t+16];
        for(int t = 0; t < p_blockSize; ++t; @inner) if(t< 8) s_norm[t] += s_norm[t+ 8];
        for(int t = 0; t < p_blockSize; ++t; @inner) if(t< 4) s_norm[t] += s_norm[t+ 4];
        for(int t = 0; t < p_blockSize; ++t; @inner) if(t< 2) s_norm[t] += s_norm[t+ 2];
        for(int t = 0; t < p_blockSize; ++t; @inner) if(t< 1) norm[b] = s_norm[0] + s_norm[1];
    }
}