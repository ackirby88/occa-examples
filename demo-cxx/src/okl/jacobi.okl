/**
 * Poisson problem:               diff(u, x, 2) + diff(u, y, 2) = f
 * Coordinate transform:          x -> -1 + delta*i, 
 *                                y -> -1 + delta*j
 * 2nd-Order finite difference:   4*u(j,i) - u(j-1,i) - u(j+1,i) - u(j,i-1) - u(j,i+1) = -delta*delta*f(j,i) *
 * Define: rhs(j,i) = -delta*delta*f(j,i)
 *
 * Jacobi iteration: newu(j,i) = 0.25*(u(j-1,i) + u(j+1,i) + u(j,i-1) + u(j,i+1) + rhs(j,i))
 * To run with a 402x402 grid until the solution changes less than 1e-7 per iteration (in l2): ./main 400 1e-7  
 *
 */
#ifndef JACOBI_OKL
#define JACOBI_OKL

/* header files */
#include "./okl/precision_types.h"

/* function header files */
#if OKL_INLINE_MACROS == 1
#  include "./okl/jacobi_inner.okl.macro"
#else /* NO INLINED MACRO FUNCTIONS */
#  include "./okl/jacobi_inner.okl"
#endif


/** NOTE: This kernels breaks up the grid into BX x BY tiles (16x16).
  * Each tile has one thread assigned to each grid cell.
  * 
  * Challenge: Can you improve the performance by letting a single thread do multiple rows nearby?
  *   i.e., Add another loop inside the i-indexed for-loop to have it serially do more work (since it will have cached nearby data),
  */
@kernel void jacobi(const int N,
          @restrict const Real *RHS  @dim(N+2,N+2),
          @restrict const Real *U    @dim(N+2,N+2),
          @restrict       Real *NEWU @dim(N+2,N+2)){

  for(int start1=1; start1<=N; start1+=BY; @outer(1)){
    for(int start0=1; start0<=N; start0+=BX; @outer(0)){
      for(int j=start1; j<start1+BY; ++j; @inner(1)){
        for(int i=start0; i<start0+BX; ++i; @inner(0)){
          if((i <= N) && (j <= N)){
            NEWU(i,j) = 0.25*(U(i,j-1) + U(i,j+1) + U(i-1,j) + U(i+1,j) + RHS(i,j));
          }
        }
      }
    }
  }
}

@kernel void jacobi_with_macro(const int N,
          @restrict const Real *RHS  @dim(N+2,N+2),
          @restrict const Real *U    @dim(N+2,N+2),
          @restrict       Real *NEWU @dim(N+2,N+2)){

  for(int start1=1; start1<=N; start1+=BY; @outer(1)){
    for(int start0=1; start0<=N; start0+=BX; @outer(0)){
      jacobi_inner(N,RHS,U,NEWU);
    }
  }
}

#endif /* JACOBI_OKL */
